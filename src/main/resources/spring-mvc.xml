<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
	<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<context:component-scan base-package="com.mingslife.controller" />
	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<!-- <property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property> -->
	</bean>
	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<!-- <property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />	JSON转换器
			</list>
		</property> -->
	</bean>
	<!-- 定义跳转的文件的前后缀 ，视图模式配置-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/view/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"  
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="utf-8" />  
        <!-- 文件大小最大值 -->
        <property name="maxUploadSize" value="10485760000" />  
        <!-- 内存中的最大值 -->
        <property name="maxInMemorySize" value="40960" />  
    </bean>
    
    <!-- <mvc:interceptors>  
        使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求  
        <bean class="com.mingslife.web.interceptor.PermissionInterceptor"/>
        <mvc:interceptor>
            <mvc:mapping path="/test/number.do"/>
            定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的
            <bean class="com.host.app.web.interceptor.LoginInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors> -->
    
    <!-- 国际化配置 -->    
    <!-- <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver" />
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
      <property name="basenames">
        <list>
          <value>classpath:ValidationMessages</value>
        </list>
      </property>
      <property name="useCodeAsDefaultMessage" value="true" />
    </bean> -->

    <!-- 注册验证器 -->
    <mvc:annotation-driven validator="validator">
      <mvc:message-converters register-defaults="true">
        <bean class="org.springframework.http.converter.StringHttpMessageConverter">
          <property name="supportedMediaTypes">
            <list>
              <value>text/html;charset=UTF-8</value>
              <value>text/plain;charset=UTF-8</value>
              <value>application/json;charset=UTF-8</value>
            </list>
          </property>
          <property name="writeAcceptCharset" value="false" />
        </bean>
      </mvc:message-converters>
    </mvc:annotation-driven>
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
      <property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
      <!-- 这里配置将使用上面国际化配置的messageSource -->
      <property name="validationMessageSource" ref="messageSource" />
    </bean> 
    
    <!-- 事件监听器 -->
    <bean id="emailListener" class="com.mingslife.web.event.listener.EmailListener"></bean>

</beans>